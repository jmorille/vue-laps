# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Build CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  release:
    types: [created]
    
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:

    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
    - uses: actions/checkout@v4

    - if: github.event.release
      name: Get release
      id: get_release
      uses: bruceadams/get-release@v1.3.2
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: NodeJS pnpm
      uses: pnpm/action-setup@v3
      with:
        version: 8.15.4

    - name: NodeJS 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'

    - name: JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        cache: 'maven'
    - if: github.event.release
      name: Update version in pom.xml (Release only)
      run: mvn -B versions:set -DnewVersion=${{ github.event.release.tag_name }} -DgenerateBackupPoms=false
      
    - name: Build Maven
      run: mvn --batch-mode package deploy
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



    - name: Extract Maven Info
      run: |
        echo "MAVEN_GROUP_ID=$( mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout )"        >> $GITHUB_ENV
        echo "MAVEN_ARTIFACT_ID=$( mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout )"  >> $GITHUB_ENV
        echo "MAVEN_VERSION=$( mvn help:evaluate -Dexpression=project.version -q -DforceStdout )"         >> $GITHUB_ENV
        echo "MAVEN_DESCRIPTION=$( mvn help:evaluate -Dexpression=project.description -q -DforceStdout )"         >> $GITHUB_ENV
 

    - if: github.event.release
      name:  Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./target/${{ env.MAVEN_ARTIFACT_ID }}-${{ env.MAVEN_VERSION }}-app-compose.tar.gz
        asset_name: ${{ env.MAVEN_ARTIFACT_ID }}-${{ env.MAVEN_VERSION }}-app-compose.tar.gz
        asset_content_type: application/gzip

    - name: Archive
      run: mkdir staging && cp target/*.tar.gz staging

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: laps-package
        path: target/*.tar.gz
        if-no-files-found: error

    # Install the cosign tool except on PR
    # https://github.com/sigstore/cosign-installer
    - name: Registry - Install cosign
      if: github.event_name != 'pull_request'
      uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 #v3.1.1
      with:
        cosign-release: 'v2.1.1'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3


    # Login against a Docker registry except on PR
    # https://github.com/docker/login-action
    - name: Log into registry ${{ env.REGISTRY }}
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
    - name: Extract Docker metadata ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      id: meta
      uses: docker/metadata-action@v5 # v5.0.0
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}



    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          MAVEN_ARTIFACT_ID=${{ env.MAVEN_ARTIFACT_ID }}
          MAVEN_VERSION=${{ env.MAVEN_VERSION }}


    # Sign the resulting Docker image digest except on PRs.
    # This will only write to the public Rekor transparency log when the Docker
    # repository is public to avoid leaking data.  If you would like to publish
    # transparency data even for private images, pass --force to cosign below.
    # https://github.com/sigstore/cosign
#    - name: Sign the published Docker image
#      if: ${{ github.event_name != 'pull_request' }}
#      env:
        # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
#        TAGS: ${{ steps.meta.outputs.tags }}
#        DIGEST: ${{ steps.build-and-push.outputs.digest }}
      # This step uses the identity token to provision an ephemeral certificate
      # against the sigstore community Fulcio instance.
#      run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
